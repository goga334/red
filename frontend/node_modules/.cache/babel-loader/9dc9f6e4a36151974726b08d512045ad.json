{"ast":null,"code":"var _jsxFileName = \"/home/jkl334/test_django/red/frontend/src/GroupCreateUpdate.js\";\nimport React, { Component } from 'react';\nimport Service from './Service';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst groupService = new Service('group');\n\nclass GroupCreateUpdate extends Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: this.handleSubmit,\n      href: \"/group/\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Group name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"form-control\",\n          type: \"text\",\n          ref: \"name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Description:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"form-control\",\n          type: \"text\",\n          ref: \"description\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"btn btn-primary mt-4\",\n          type: \"submit\",\n          value: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 11\n    }, this);\n  }\n\n  handleSubmit(event) {\n    const {\n      match: {\n        params\n      }\n    } = this.props;\n\n    if (params && params.pk) {\n      this.handleUpdate(params.pk);\n    } else {\n      this.handleCreate();\n    }\n\n    event.preventDefault();\n  }\n\n  handleCreate() {\n    groupService.create({\n      \"find\": 0,\n      \"obj\": \"group\",\n      \"name\": this.refs.name.value,\n      \"description\": this.refs.description.value\n    }).then(result => {\n      alert(\"Group created!\");\n    }).catch(e => {\n      alert(e.response.data.name);\n    });\n  }\n\n  handleUpdate(pk) {\n    groupService.update({\n      \"pk\": pk,\n      \"obj\": \"group\",\n      \"name\": this.refs.name.value,\n      \"description\": this.refs.description.value\n    }).then(result => {\n      alert(\"Group updated!\");\n    }).catch(e => {\n      alert(e.response.data.name);\n    });\n  }\n\n  componentDidMount() {\n    const {\n      match: {\n        params\n      }\n    } = this.props;\n\n    if (params && params.pk) {\n      groupService.getById(params.pk).then(c => {\n        this.refs.name.value = c.name;\n        this.refs.description.value = c.description;\n      });\n    }\n  }\n\n}\n\nexport default GroupCreateUpdate;","map":{"version":3,"sources":["/home/jkl334/test_django/red/frontend/src/GroupCreateUpdate.js"],"names":["React","Component","Service","groupService","GroupCreateUpdate","constructor","props","handleSubmit","bind","render","event","match","params","pk","handleUpdate","handleCreate","preventDefault","create","refs","name","value","description","then","result","alert","catch","e","response","data","update","componentDidMount","getById","c"],"mappings":"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","sourcesContent":["import  React, { Component } from  'react';\nimport Service  from  './Service';\n\nconst  groupService  =  new  Service('group');\n\nclass  GroupCreateUpdate  extends  Component {\n\n    constructor(props) {\n        super(props);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    render() {\n        return (\n          <form onSubmit={this.handleSubmit} href = \"/group/\">\n          <div className=\"form-group\">\n            <label>\n              Group name:</label>\n              <input className=\"form-control\" type=\"text\" ref='name' />\n\n            <label>\n              Description:</label>\n              <input className=\"form-control\" type=\"text\" ref='description'/>\n\n              <input className=\"btn btn-primary mt-4\"  type=\"submit\" value=\"Submit\" />\n\n            </div>\n          </form>\n        );\n    }\n\n    handleSubmit(event) {\n        const { match: { params } } =  this.props;\n        if(params  &&  params.pk){\n            this.handleUpdate(params.pk);\n        }\n        else\n        {\n            this.handleCreate();\n        }\n        event.preventDefault();\n    }\n\n    handleCreate(){\n        groupService.create(\n            {\n            \"find\": 0,\n            \"obj\": \"group\",\n            \"name\":  this.refs.name.value,\n            \"description\":  this.refs.description.value\n            }).then((result)=>{\n                    alert(\"Group created!\");\n            }).catch((e)=>{\n                    alert(e.response.data.name);\n            });\n    }\n\n    handleUpdate(pk){\n        groupService.update(\n            {\n            \"pk\":  pk,\n            \"obj\": \"group\",\n            \"name\":  this.refs.name.value,\n            \"description\":  this.refs.description.value\n            }).then((result)=>{\n                alert(\"Group updated!\");\n            }).catch((e)=>{\n                alert(e.response.data.name);\n            });\n        }\n\n        componentDidMount(){\n            const { match: { params } } =  this.props;\n            if(params  &&  params.pk)\n            {\n                groupService.getById(params.pk).then((c)=>{\n                    this.refs.name.value  =  c.name;\n                    this.refs.description.value  =  c.description;\n                })\n            }\n        }\n}\nexport default GroupCreateUpdate;"]},"metadata":{},"sourceType":"module"}